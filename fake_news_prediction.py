# -*- coding: utf-8 -*-
"""Fake news prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OGHOxFH4DMByFEEEXEGuDUIEX9Ri_6o6

Import the dataset
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# printing the stopwords in English
import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""Data Preprocessing"""

# loading the dataset to pandas Data Frame
news_dataset = pd.read_csv('/content/train.csv', encoding='latin-1', low_memory=False)

news_dataset.shape

#print the first five rows of dataset
news_dataset.head()

#counting the no of missing vauses in the dataset
news_dataset.isnull().sum()

# replacing the null valuses wiith empty strings
news_dataset = news_dataset.fillna('')

#merge the author name and news title
news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

#separating the data and label
X = news_dataset.drop(columns='label',axis=1)
Y = news_dataset['label']

print(X)

print(Y)

"""stemming the process of reducing a word to its root word
example : actor , actress , acting ----> act

"""

from nltk.stem.porter import PorterStemmer
port_stem = PorterStemmer()

def stemming(content):
    stemmed_content = re.sub('[^a-zA-Z]',' ',content)
    stemmed_content = stemmed_content.lower()
    stemmed_content = stemmed_content.split()
    stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in set(stopwords.words('english'))]
    stemmed_content = ' '.join(stemmed_content)
    return stemmed_content

news_dataset['content']= news_dataset['content'].apply(stemming)

print(news_dataset['content'])

# Filter the dataset to include only rows where 'label' is '0' or '1'
filtered_dataset = news_dataset[news_dataset['label'].isin(['0', '1'])]

# Separate the data and label from the filtered dataset
X = filtered_dataset['content'].values
Y = filtered_dataset['label'].values

print(X)

print(Y)

Y.shape

#converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

#splitting the dataset to training and test data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

print(X_test)

"""**Training the Model : Logistic Regression Model**"""

model = LogisticRegression()

model.fit(X_train, Y_train)

#evaluation
#accuracy
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy for test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""Making a predictive system

"""

from os import pread
x_news=X_test[186]
preadiction = model.predict(x_news)
print(preadiction)

if (preadiction[0]=='0'):
  print('The news is Real')
else:
  print('The news is Fake')

print(Y_test[186])

